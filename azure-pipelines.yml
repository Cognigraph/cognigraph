# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'Windows'
  pool:
    vmImage: 'VS2017-Win2016'
  strategy:
    matrix:
      Python36:
        python.version: '3.7'
    maxParallel: 4

  steps:
  - checkout: self
    submodules: true
  - powershell:
        Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    displayName: Add conda to PATH

  - script: |
      conda update --yes conda
      conda create --yes --quiet --name test python=3.6
    displayName: Create conda env
  - powershell: |
        $env:PYTHON = $env:CONDA
        $env:PATH = $env:PYTHON + "\envs\test;" + $env:PYTHON + "\envs\test\Scripts;" + $env:PYTHON + ";" + $env:PYTHON + "\Scripts;" + $env:PATH
        Write-Host ("##vso[task.setvariable variable=PATH]" + $env:PATH)
    displayName: Add conda python to PATH
  - script: 
        python -c "import sys; print(sys.version)"
    displayName: Print python version
  - script:
        python -c "from urllib.request import urlopen; import ssl; c = ssl._create_unverified_context(); print(urlopen('https://cloud-api.yandex.net/v1/disk/public/resources/download?public_key=https://yadi.sk/d/kctCqYe6AQjL8g', context=c))"
    displayName: Try openurl
  - script: |
      call activate test
      conda install --yes --name test numpy scipy matplotlib h5py sympy scikit-learn pandas pytest certifi
      conda install --yes --name test -c tstenner pylsl
      python -m pip install --upgrade pip setuptools wheel
      pip install pyqt5 mne==0.16 typing pyqtgraph nibabel tables
    displayName: 'Install dependencies'
  - script: |
      call activate test
      pip install PyOpenGL PyOpenGL_accelerate
    displayName: Insall PyOpenGL
  - script:
      python setup.py develop
    displayName: Install cognigraph
  - script:
      python cognigraph/utils/io.py
    displayName: Run io.py
  - script: |
      call activate test
      pytest cognigraph --junitxml=junit/test-results.xml
    displayName: 'Run tests'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()